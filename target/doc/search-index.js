var searchIndex = JSON.parse('{\
"monitor":{"doc":"The monitor program is the bridge between every DWM …","t":[0,0,5,0,0,0,5,5,5,8,3,11,11,11,11,11,11,11,11,12,12,5,10,5,11,11,11,11,5,5,5,5,5,5,5,5,0,3,3,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,12,12,12,11,11,11,11,11,11,11,11,12,11,11],"n":["communication","monitor","run","file_transfer","http_requests","tcp","receive_file","send_file","start_file_server","RequestSerializable","Test","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","s1","s2","send","serialize","test","try_from","try_into","type_id","vzip","fetch_message","handle_client","process_input","read_f32","read_i32","read_u32","send_update","start_server","stats","NodeData","ProcData","borrow","borrow","borrow_mut","borrow_mut","cores","cpu","cpu_usage","delay_t","deref","deref","deref_mut","deref_mut","drop","drop","fetch_all","fmt","from","from","get_id","init","init","into","into","new","new","node_id","node_id","pid","progress","ram","recv_t","scatter_t","send_t","serialize","serialize","set_id","temperature","threads","total_ram","try_from","try_from","try_into","try_into","type_id","type_id","update","update","used_ram","vzip","vzip"],"q":["monitor","","","monitor::communication","","","monitor::communication::file_transfer","","","monitor::communication::http_requests","","","","","","","","","","","","","","","","","","","monitor::communication::tcp","","","","","","","","monitor::monitor","monitor::monitor::stats","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Holds all communication interfaces","The code that gathers information on processes ","Runs the program","Holds methods to transfer and receive files. File …","","Handles the lowest lever of TCP communications of the …","Handles an incoming TCP byte stream containing a file","Sends a file over a TCP stream It is assumed only pcm …","Starts a server that receives files from the partitioner.","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","Converts a string into a byte array","Handles a client connection","Validates the bytes received from the stream and returns …","Converts a byte array into an f32","Converts a byte array into an i32","Converts a byte array into an u32","Sends the data to the server","Starts the TCP server that communicates usage and progress …","","Stores usage data relative to the node","Stores data relative to a process. This includes both data …","","","","","","","","","","","","","","","Generates a new HashMap with all processes with the given …","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Populates a new NodeData struct with data retrieved with …","","","","","","","","","","","","","","","","","","","","","Updates the volatile data of the process","Updates volatile data.","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,3,4,3,4,4,3,4,3,3,4,3,4,3,4,3,4,3,4,4,3,4,3,4,3,4,3,4,3,3,3,3,3,3,3,4,4,4,4,4,3,4,3,4,3,4,3,4,4,3,4],"f":[null,null,[[["string",3],["usize",0],["usize",0],["str",0]]],null,null,null,[[["tcpstream",3],["str",0],["i32",0]]],[[["str",0],["str",0],["u8",0]]],[[["string",3],["usize",0],["str",0]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],null,null,[[["requestserializable",8],["string",3]]],[[["",0]],["string",3]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[["str",0]]],[[["tcpstream",3],["hashmap",3],["nodedata",3],["system",3]]],[[]],[[],["f32",0]],[[],["i32",0]],[[],["u32",0]],[[["requestserializable",8],["str",0]]],[[["string",3],["usize",0],["str",0]]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["str",0],["u8",0],["sys",3]],["hashmap",3,[["i32",0]]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0]],["u8",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["i32",0],["u8",0],["sys",3]]],[[]],null,null,null,null,null,null,null,null,[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0],["u8",0]]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["f32",0],["f32",0],["f32",0],["f32",0],["f32",0],["sys",3]]],[[["",0],["sys",3]]],null,[[]],[[]]],"p":[[3,"Test"],[8,"RequestSerializable"],[3,"ProcData"],[3,"NodeData"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};